{"version":3,"sources":["api.ts","components/Loader/Loader.tsx","components/Navigation.tsx","components/PeopleTable.tsx","components/PeoplePage.tsx","App.tsx","index.tsx"],"names":["getPeople","delay","Promise","resolve","setTimeout","then","fetch","response","json","Loader","className","Navigation","role","to","isActive","classNames","end","PeopleTable","people","selectedPerson","getPersonParent","parentName","find","person","name","isExistInTable","some","length","map","personName","slug","sex","born","died","motherName","fatherName","PeoplePage","useParams","App","useState","setPeople","isError","setIsError","loading","setLoading","useEffect","catch","path","index","element","replace","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.ac56edd5.chunk.js","sourcesContent":["import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport { NavLink } from 'react-router-dom';\n\nexport const Navigation: React.FC = () => {\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink\n            to=\"/\"\n            className={({ isActive }) => classNames('navbar-item',\n              { 'has-background-grey-lighter': isActive })}\n          >\n            Home\n          </NavLink>\n\n          <NavLink\n            end\n            to=\"/people\"\n            className={({ isActive }) => classNames('navbar-item',\n              { 'has-background-grey-lighter': isActive })}\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import classNames from 'classnames';\nimport { Link } from 'react-router-dom';\nimport { Person } from '../types';\n\ninterface Props {\n  people: Person[];\n  selectedPerson: string;\n}\n\nexport const PeopleTable: React.FC<Props> = ({\n  people,\n  selectedPerson,\n}) => {\n  const isSelected = (personName: Person) => personName.slug === selectedPerson;\n\n  const getPersonParent = (parentName: string | null) => {\n    return people.find(person => person.name === parentName);\n  };\n\n  const isExistInTable = (parentName: string | null) => {\n    return people.some(person => person.name === parentName);\n  };\n\n  return (\n    <>\n      {people.length === 0 ? (\n        <p data-cy=\"noPeopleMessage\">\n          There are no people on the server\n        </p>\n      )\n        : (\n          <table\n            data-cy=\"peopleTable\"\n            className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n          >\n\n            <thead>\n              <tr>\n                <th>Name</th>\n                <th>Sex</th>\n                <th>Born</th>\n                <th>Died</th>\n                <th>Mother</th>\n                <th>Father</th>\n              </tr>\n            </thead>\n\n            <tbody>\n              {people.map(person => (\n                <tr\n                  key={person.slug}\n                  data-cy=\"person\"\n                  className={classNames({\n                    'has-background-warning': isSelected(person),\n                  })}\n                >\n                  <td>\n                    <Link\n                      to={`/people/${person.slug}`}\n                      className={classNames({\n                        'has-text-danger': person.sex === 'f',\n                      })}\n                    >\n                      {person.name}\n                    </Link>\n                  </td>\n\n                  <td>{person.sex}</td>\n                  <td>{person.born}</td>\n                  <td>{person.died}</td>\n\n                  <td>\n                    {isExistInTable(person.motherName) ? (\n                      <Link\n                        to={`/people/${getPersonParent(person.motherName)?.slug}`}\n                        className=\"has-text-danger\"\n                      >\n                        {person.motherName}\n                      </Link>\n                    )\n                      : (\n                        <span>\n                          {person.motherName || '-'}\n                        </span>\n                      )}\n                  </td>\n\n                  <td>\n                    {isExistInTable(person.fatherName) ? (\n                      <Link\n                        to={`/people/${getPersonParent(person.fatherName)?.slug}`}\n                      >\n                        {person.fatherName}\n                      </Link>\n                    )\n                      : (\n                        <span>\n                          {person.fatherName || '-'}\n                        </span>\n                      )}\n                  </td>\n\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        )}\n    </>\n  );\n};\n","import { useParams } from 'react-router-dom';\nimport { PeopleTable } from './PeopleTable';\nimport { Person } from '../types';\n\ninterface Props {\n  people: Person[];\n}\nexport const PeoplePage: React.FC<Props> = ({ people }) => {\n  const { slug = '' } = useParams();\n\n  return (\n    <>\n      {people.length !== 0 && (\n        <>\n          <h1 className=\"title\">People Page</h1>\n          <PeopleTable people={people} selectedPerson={slug} />\n        </>\n      )}\n    </>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport {\n  Navigate, Route, Routes,\n} from 'react-router-dom';\nimport { getPeople } from './api';\nimport { Loader } from './components/Loader';\nimport { Navigation } from './components/Navigation';\nimport { PeoplePage } from './components/PeoplePage';\nimport { Person } from './types';\n\nexport const App: React.FC = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isError, setIsError] = useState(false);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    getPeople()\n      .then(setPeople)\n      .then(() => setLoading(false))\n      .catch(() => {\n        setLoading(false);\n        setIsError(true);\n      });\n  }, []);\n\n  return (\n    <div data-cy=\"app\">\n\n      <Navigation />\n\n      <main className=\"section\">\n        <div className=\"container\">\n\n          <div className=\"block\">\n            <div className=\"box table-container\">\n              {loading && <Loader />}\n              {isError && (\n                <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n                  Something went wrong\n                </p>\n              )}\n\n              <Routes>\n                <Route\n                  path=\"people\"\n\n                >\n                  <Route\n                    index\n                    element={<PeoplePage people={people} />}\n                  />\n                  <Route\n                    path=\":slug\"\n                    element={<PeoplePage people={people} />}\n                  />\n                </Route>\n\n                <Route\n                  path=\"/\"\n                  element={<h1 className=\"title\">Home Page</h1>}\n                />\n                <Route\n                  path=\"home\"\n                  element={<Navigate to=\"/\" replace />}\n                />\n\n                <Route\n                  path=\"*\"\n                  element={<h1 className=\"title\">Page not found</h1>}\n                />\n              </Routes>\n\n            </div>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n};\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}